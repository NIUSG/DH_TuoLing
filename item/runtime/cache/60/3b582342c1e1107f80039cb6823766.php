<?php
//000000086400
 exit();?>
a:19:{s:11:"bloginfo_id";i:54;s:12:"bloginfo_oid";i:0;s:14:"bloginfo_title";s:35:"java内部类——2静态内部类";s:17:"bloginfo_describe";s:273:"静态内部类简介：
&nbsp;&nbsp;&nbsp;&nbsp;1，使用static修饰的成员内部类就是静态内部类
&nbsp;&nbsp;&nbsp;&nbsp;2，静态内部类和外部类没有任何关系，只是生成类名和类定义的时候有影响，静态内部类和外部类是...";s:12:"bloginfo_img";s:28:"InitializeImg/initialize.jpg";s:15:"bloginfo_status";i:1;s:19:"bloginfo_createtime";i:1544020676;s:19:"bloginfo_updatetime";i:1544020676;s:8:"class_id";i:20;s:13:"bloginfo_like";i:0;s:13:"bloginfo_hate";i:0;s:14:"bloginfo_click";i:15;s:10:"created_at";s:19:"2018-12-05 22:37:56";s:4:"date";s:10:"2018-12-05";s:4:"time";s:8:"22:37:56";s:11:"class_title";s:4:"JAVA";s:10:"label_list";a:1:{i:0;a:5:{s:8:"label_id";i:22;s:9:"label_oid";i:0;s:11:"label_title";s:4:"JAVA";s:12:"label_status";i:1;s:16:"label_createtime";i:1537881783;}}s:12:"bloglink_url";a:0:{}s:7:"content";s:5258:"<h3 style="margin-top: 20px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; font-weight: bold; -webkit-font-smoothing: antialiased; font-size: 18px; ">静态内部类</h3><pre style="margin-top: 15px; margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding-top: 6px; padding-right: 10px; padding-bottom: 6px; padding-left: 10px; border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-style: initial; border-color: initial; font-size: 13px; font-family: Consolas, &#39;Liberation Mono&#39;, Courier, monospace; background-color: rgb(248, 248, 248); border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(204, 204, 204); border-right-color: rgb(204, 204, 204); border-bottom-color: rgb(204, 204, 204); border-left-color: rgb(204, 204, 204); line-height: 19px; overflow-x: auto; overflow-y: auto; border-top-left-radius: 3px 3px; border-top-right-radius: 3px 3px; border-bottom-right-radius: 3px 3px; border-bottom-left-radius: 3px 3px; ">简介：
&nbsp;&nbsp;&nbsp;&nbsp;1，使用static修饰的成员内部类就是静态内部类
&nbsp;&nbsp;&nbsp;&nbsp;2，静态内部类和外部类没有任何关系，只是生成类名和类定义的时候有影响，静态内部类和外部类是平级的，使用方法和外部类完全相同
&nbsp;&nbsp;&nbsp;&nbsp;3，创建静态内部类的实例使用：
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;外部类名.内部类名&nbsp;实例名&nbsp;=&nbsp;new&nbsp;外部类名.内部类名

注意：
&nbsp;&nbsp;&nbsp;&nbsp;1，静态内部类和外部类不能重名
&nbsp;&nbsp;&nbsp;&nbsp;2，静态内部类不能访问外部类中非静态的属性和方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;外部类不能访问内部类的非静态属性和方法</pre><p style="margin-top: 15px; margin-right: 0px; margin-bottom: 15px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; ">实例：</p><pre style="margin-top: 15px; margin-right: 0px; margin-bottom: 0px !important; margin-left: 0px; padding-top: 6px; padding-right: 10px; padding-bottom: 6px; padding-left: 10px; border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-style: initial; border-color: initial; font-size: 13px; font-family: Consolas, &#39;Liberation Mono&#39;, Courier, monospace; background-color: rgb(248, 248, 248); border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(204, 204, 204); border-right-color: rgb(204, 204, 204); border-bottom-color: rgb(204, 204, 204); border-left-color: rgb(204, 204, 204); line-height: 19px; overflow-x: auto; overflow-y: auto; border-top-left-radius: 3px 3px; border-top-right-radius: 3px 3px; border-bottom-right-radius: 3px 3px; border-bottom-left-radius: 3px 3px; ">public&nbsp;class&nbsp;StaticInnerClass
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String&nbsp;[]&nbsp;args)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O&nbsp;o_obj&nbsp;=&nbsp;new&nbsp;O();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o_obj.fun();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O.fun_static();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O.I&nbsp;i_obj&nbsp;=&nbsp;new&nbsp;O.I();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i_obj.fun();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O.I.fun_static();
&nbsp;&nbsp;&nbsp;&nbsp;}
}

class&nbsp;O
{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;fun()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;fun,no&nbsp;static.&nbsp;&nbsp;OUTER&nbsp;CLASS&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;fun_static()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;fun,static.&nbsp;OUTER&nbsp;CLASS&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;class&nbsp;I
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;fun()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;fun,no&nbsp;static.&nbsp;&nbsp;INNER&nbsp;CLASS&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;fun_static()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;fun,static.&nbsp;INNER&nbsp;CLASS&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p><br/></p>";}